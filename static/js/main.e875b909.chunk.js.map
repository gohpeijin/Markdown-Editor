{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","markdown","setMarkdown","convertedMarkdown","DOMPurify","sanitize","replace","USE_PROFILES","html","className","value","onChange","e","target","parse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAoCeA,MA/Bf,WAEE,MAA+BC,mBAAU,uCAAzC,mBAAOC,EAAP,KAAgBC,EAAhB,KAOMC,EAAoBC,IAAUC,SAASJ,EAASK,QAAQ,sBAAuB,aAAaA,QAAQ,kBAAmB,aAAaA,QAAQ,YAAa,aAAaA,QAAQ,MAAO,QAAS,CAClMC,aAAc,CAAEC,MAAM,KAGxB,OACC,gCACC,oBAAIC,UAAU,MAAd,6BACA,sBAAKA,UAAU,OAAf,UACE,uCAAa,2CAEf,sBAAKA,UAAU,QAAf,UAEA,0BAAWC,MAAST,EAAUU,SAAU,SAAAC,GAAC,OAAIV,EAAYU,EAAEC,OAAOH,QAAlE,eAEE,qBAAKD,UAAU,UAAf,SACG,4BAAIK,YAAMX,cCfJY,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e875b909.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport parse from 'html-react-parser'; //import this to avoid using dangerouslySetInnerHtml \r\nimport DOMPurify from 'dompurify';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\r\n  const [markdown,setMarkdown] = useState (\"***Italic***\\n**Bold**\\n_Underline_\");\r\n\r\n\r\n  // const convertedMarkdown = DOMPurify.sanitize(markdown.replace(/\\*\\*\\*([^]+?)\\*\\*\\*/gm, '<i>$1</i>').replace(/\\*\\*([^]+?)\\*\\*/gm, '<b>$1</b>').replace(/_([^]+?)_/gm, '<u>$1</u>').replace(/\\n/g, \"<br>\"), {\r\n  //   USE_PROFILES: { html: true },\r\n  // }); // line break will not reset\r\n\r\n  const convertedMarkdown = DOMPurify.sanitize(markdown.replace(/\\*\\*\\*(.+?)\\*\\*\\*/gm, '<i>$1</i>').replace(/\\*\\*(.+?)\\*\\*/gm, '<b>$1</b>').replace(/_(.+?)_/gm, '<u>$1</u>').replace(/\\n/g, \"<br>\"), {\r\n    USE_PROFILES: { html: true },\r\n  }); // line break will reset \r\n\r\n  return (\r\n   <div>\r\n    <h1 className=\"App\">Markdown Editor</h1> \r\n    <div className=\"Text\">\r\n      <p>Editor</p><p>Preview</p>\r\n    </div>\r\n    <div className=\"Split\">\r\n    {/* <textarea  value = {markdown} onChange={handleChange} > </textarea> */}\r\n    <textarea  value = {markdown} onChange={e => setMarkdown(e.target.value)} > </textarea>\r\n      {/* <textarea   onBlur={handleBlur} > </textarea> */}\r\n      <div className=\"Preview\">\r\n         <p>{parse(convertedMarkdown)}</p>\r\n      </div>\r\n    </div>\r\n   </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}